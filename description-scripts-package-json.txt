"start": "concurrently -k -n WEBPACK,I18N -c blue,magenta \"webpack serve --env port=3000\" \"npm run i18n:watch\""
"build:prod": "webpack --env mode=production",
"build:dev": "webpack --env mode=development --env port=3000"
"i18n:extract": "i18next \"src/**/*.{ts,tsx}\" --config src/shared/config/i18n/i18next-parser.config.js",
"i18n:watch": "chokidar \"src/**/*.{ts,tsx}\" -c \"npm run i18n:extract\""

"start": "concurrently -k -n WEBPACK,I18N,TYPES_GEN -c blue,magenta,yellow \"webpack serve --env port=3000\" \"npm run i18n:watch\" \"npm run types:styles:watch\"",
concurrently	Запускает несколько команд параллельно в одном терминале
-k	"Kill others" — если одна команда завершится (или упадёт), остальные тоже завершатся. Это удобно при Ctrl+C
-n WEBPACK,I18N	Имена процессов: задаёт псевдонимы для логов, чтобы видеть, какая команда что пишет (таким образом будем видеть в терминале строки начинающиеся с синих [WEBPACK] которе маркируют процессы webpack)
-c blue,magenta	Цвета логов: делает вывод удобным: Webpack будет писать синим, i18n — фиолетовым  (таким образом будем видеть в терминале строки начинающиеся с фиолетовых [I18N] которе маркируют процессы 18n)
"webpack serve --env port=3000"	Первая команда — твой Webpack dev-сервер эта команда запустит webpack-dev-server но не создаст папку build и не изменит если она уже существует в проекте.
Всё содержимое файлов которые долны быть в папке build создаетё прямов в памяти и прямо из памяти считавет и изменения вносятся и отобразаются на экране на лету. внутри webpack-dev-server и будет существовать пока сервер работает
"npm run i18n:watch"	Вторая команда — вотчер для автоматического извлечения переводов
npm run types:styles:watch Третья команда запускает генерацию d.ts файлов для .module.scss файлов


"npm run build:dev"
 при выпонении данного скрипта запустится сборка в dev режиме при это функция 
в файлу webpack.config.ts получит объект env. В этом обекте будет иметь следующий вид
{mode: 'production', port: 3000} Собственно значения этих полей узазываются именно в scripts package.json
В общем env это объект с полями которые мы определяем прямо в package.json и мы можем типизировать этот
объект например у нас он типизирован интерфейсом BuildEnv. Эта команда не запустит webpack-dev-server. Только
соберет файлы в папку build

// webpack.config.ts
export default (env: BuildEnv) => {
    .....
    return config;
};

 "i18n:extract": "i18next \"src/**/*.{ts,tsx}\" --config src/shared/config/i18n/i18next-parser.config.js", 
 команда запуска 118next-parser. 
 Прочитает файлы и создаст новые ключи в файлах с переводами так же указан путь до файла конфигурации i18next-parser
 Запускаем командой npm run i18n:extract

"i18n:watch": "chokidar \"src/**/*.{ts,tsx}\" -c \"npm run i18n:extract\""
Комнада запускает chokidar который смотрит за изменениями в файлах и выполняет команду npm run i18n:extract если файлы изменяются. Такм образом на не нужно выполнять данную команд всякий раз сами
Нужно только в начале работы выполнить npm run i18n:watch, но за нас это сделат concurrently при npm start

"lint": "eslint . --ext .ts,.tsx,.js,.jsx" (npm run lint)
Команда запускает проверку линтинга на всех файлах с указанными выше расширениями


"lint:fix": "eslint . --ext .ts,.tsx,.js,.jsx --fix", (npm run lint:fix)
Эта команда может починить некотоые ошибки которые выявила прошлая команда npm run lint

"lint:inspect": "eslint --inspect-config src/index.tsx", (npm run lint:inspect)
Команда откроет во вкладке браузра встроенную в eslint утилиту котороя позовляет просматривать правила которые есть 
к конфигурации линтера

"lint:styles": "stylelint \"src/**/*.{css,scss}\"" (npm run lint:styles)
Команда запускает линтер для файлов стилей .css .scss

"lint:styles:fix": "stylelint \"src/**/*.{css,scss}\" --fix" (npm run lint:styles:fix)
команда может автоматически исправить некоторые ошибки линтинга файлов со стилями

  "types:styles": "typed-scss-modules src --includePaths src",
npm run types:styles
Разовая генерация всех *.module.scss.d.ts в проекте (в папке src)
Полезно при CI-сборке или ручном запуске

  "types:styles:watch": "typed-scss-modules src --includePaths src --watch"
  npm run types:styles:watch
Запускает watcher — отслеживает изменения SCSS и генерирует типы в фоне
Используется во время локальной разработки

copy-webpack-plugin 
это Webpack-плагин, который копирует файлы и папки из исходной директории в выходную (build) без участия Webpack loaders. 
Он не обрабатывает содержимое файлов — просто перемещает «как есть».



